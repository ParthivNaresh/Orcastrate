name: Code Quality

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_call:

env:
  PYTHON_VERSION: '3.11'

jobs:
  quality:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install Just
      uses: extractions/setup-just@v1

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: latest
        virtualenvs-create: true
        virtualenvs-in-project: true

    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v4
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ env.PYTHON_VERSION }}-${{ hashFiles('**/poetry.lock') }}

    - name: Install dependencies
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      run: just install

    - name: Load CI environment
      run: |
        # Use absolute path and verify file exists
        if [ -f "scripts/env/ci.env" ]; then
          cp scripts/env/ci.env .env
          echo "‚úÖ CI environment loaded from scripts/env/ci.env"
        else
          echo "‚ùå File scripts/env/ci.env not found"
          echo "üìÅ Available files:"
          ls -la scripts/env/ || echo "scripts/env/ directory not found"
          exit 1
        fi

    - name: Run linting and code quality checks
      run: just lint

    - name: Run security analysis
      run: just security
      continue-on-error: true

    - name: Upload security scan results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: security-reports
        path: bandit-report.json