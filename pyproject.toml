[tool.poetry]
name = "orcastrate"
version = "1.0.0"
description = "Production-Grade Development Environment Agent"
authors = ["Parthiv Naresh <parthivnaresh@gmail.com>"]
readme = "README.md"
license = "MIT"
repository = "https://github.com/orcastrate/orcastrate"
documentation = "https://docs.orcastrate.dev"
keywords = ["development", "environment", "automation", "devops", "containers"]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: System :: Systems Administration",
]
packages = [{include = "src"}]

[tool.poetry.dependencies]
python = "^3.10.0"
fastapi = "^0.104.1"
pydantic = "^2.5.0"
uvicorn = "^0.24.0"
psycopg2-binary = "^2.9.9"
redis = "^5.0.1"
boto3 = "^1.34.0"
google-cloud-core = "^2.4.1"
google-cloud-storage = "^2.10.0"
google-cloud-compute = "^1.14.1"
azure-identity = "^1.15.0"
openai = "^1.6.0"
anthropic = "^0.8.0"
prometheus-client = "^0.19.0"
opentelemetry-api = "^1.21.0"
click = "^8.1.7"
pyyaml = "^6.0.1"
jinja2 = "^3.1.2"
aiofiles = "^23.2.0"
httpx = "^0.26.0"
requests = "^2.28.0,<2.32.0"
asyncpg = "^0.29.0"
aiomysql = "^0.2.0"
motor = "^3.3.0"
pydantic-settings = "^2.1.0"

[tool.poetry.group.dev.dependencies]
pytest = "^7.4.0"
pytest-asyncio = "^0.21.0"
pytest-cov = "^4.1.0"
black = "^23.12.0"
flake8 = "^6.1.0"
mypy = "^1.7.0"
isort = "^5.13.0"
lxml = "^5.1.0"
autoflake = "^2.3.0"
pre-commit = "^3.6.0"
sphinx = "^7.2.0"
sphinx-rtd-theme = "^1.3.0"
myst-parser = "^2.0.0"
bandit = "^1.7.5"
safety = "^3.0.0"
testcontainers = "^3.7.0"
localstack = "^3.0.2"
pymongo = "^4.6.0"
PyMySQL = "^1.1.0"
types-PyMySQL = "^1.1.0"
docker = "^6.1.3"
urllib3 = "^1.26.0,<2.0.0"

[tool.poetry.scripts]
orcastrate = "src.cli.main:cli"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.black]
line-length = 88
target-version = ['py310']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["src"]
skip_glob = ["*/migrations/*"]

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false
disallow_incomplete_defs = false
check_untyped_defs = true
disallow_untyped_decorators = false
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
ignore_missing_imports = true
show_error_codes = true

[[tool.mypy.overrides]]
module = "src.config.settings"
ignore_errors = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config --disable-warnings"
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "unit: Unit tests",
    "integration: Integration tests",
    "live: Live integration tests with real services",
    "localstack: Tests requiring LocalStack",
    "docker_required: Tests requiring Docker daemon",
    "terraform_required: Tests requiring Terraform binary",
    "e2e: End-to-end tests",
    "slow: Slow tests",
]
asyncio_mode = "auto"
filterwarnings = [
    "ignore::DeprecationWarning",
]

[tool.coverage.run]
source = ["src"]
omit = ["*/tests/*", "*/test_*.py"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
]
